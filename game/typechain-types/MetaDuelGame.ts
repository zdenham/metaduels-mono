/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace MetaDuelGame {
  export type MoveStruct = {
    moveType: BigNumberish;
    signature: BytesLike;
    nonce: string;
  };

  export type MoveStructOutput = [number, string, string] & {
    moveType: number;
    signature: string;
    nonce: string;
  };
}

export interface MetaDuelGameInterface extends utils.Interface {
  contractName: "MetaDuelGame";
  functions: {
    "_createSignatureInputHash(uint256,uint8,string,bytes)": FunctionFragment;
    "_isCritical()": FunctionFragment;
    "_validateSignature(bytes,bytes,address)": FunctionFragment;
    "_verifyAndExtractWinner(uint256,tuple[6],bytes)": FunctionFragment;
    "endGame(uint256,tuple[6],bytes)": FunctionFragment;
    "letItBegin(address,address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_createSignatureInputHash",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isCritical",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_validateSignature",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyAndExtractWinner",
    values: [BigNumberish, MetaDuelGame.MoveStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [BigNumberish, MetaDuelGame.MoveStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "letItBegin",
    values: [string, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_createSignatureInputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isCritical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_validateSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifyAndExtractWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "letItBegin", data: BytesLike): Result;

  events: {};
}

export interface MetaDuelGame extends BaseContract {
  contractName: "MetaDuelGame";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaDuelGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _createSignatureInputHash(
      gameId: BigNumberish,
      moveType: BigNumberish,
      nonce: string,
      prevSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _isCritical(overrides?: CallOverrides): Promise<[void]>;

    _validateSignature(
      data: BytesLike,
      signature: BytesLike,
      maybeSigner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _verifyAndExtractWinner(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    endGame(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    letItBegin(
      dueler: string,
      duelee: string,
      other: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _createSignatureInputHash(
    gameId: BigNumberish,
    moveType: BigNumberish,
    nonce: string,
    prevSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  _isCritical(overrides?: CallOverrides): Promise<void>;

  _validateSignature(
    data: BytesLike,
    signature: BytesLike,
    maybeSigner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _verifyAndExtractWinner(
    gameId: BigNumberish,
    moves: MetaDuelGame.MoveStruct[],
    finalSignature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  endGame(
    gameId: BigNumberish,
    moves: MetaDuelGame.MoveStruct[],
    finalSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  letItBegin(
    dueler: string,
    duelee: string,
    other: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _createSignatureInputHash(
      gameId: BigNumberish,
      moveType: BigNumberish,
      nonce: string,
      prevSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    _isCritical(overrides?: CallOverrides): Promise<void>;

    _validateSignature(
      data: BytesLike,
      signature: BytesLike,
      maybeSigner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _verifyAndExtractWinner(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    endGame(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    letItBegin(
      dueler: string,
      duelee: string,
      other: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _createSignatureInputHash(
      gameId: BigNumberish,
      moveType: BigNumberish,
      nonce: string,
      prevSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isCritical(overrides?: CallOverrides): Promise<BigNumber>;

    _validateSignature(
      data: BytesLike,
      signature: BytesLike,
      maybeSigner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyAndExtractWinner(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endGame(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    letItBegin(
      dueler: string,
      duelee: string,
      other: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _createSignatureInputHash(
      gameId: BigNumberish,
      moveType: BigNumberish,
      nonce: string,
      prevSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isCritical(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _validateSignature(
      data: BytesLike,
      signature: BytesLike,
      maybeSigner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyAndExtractWinner(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endGame(
      gameId: BigNumberish,
      moves: MetaDuelGame.MoveStruct[],
      finalSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    letItBegin(
      dueler: string,
      duelee: string,
      other: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
