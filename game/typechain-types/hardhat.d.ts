/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AdditiveNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdditiveNFT__factory>;
    getContractFactory(
      name: "FxBaseRootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseRootTunnel__factory>;
    getContractFactory(
      name: "ICheckpointManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICheckpointManager__factory>;
    getContractFactory(
      name: "RootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootTunnel__factory>;
    getContractFactory(
      name: "MetaDuelGame",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaDuelGame__factory>;
    getContractFactory(
      name: "AdditiveNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdditiveNFT__factory>;
    getContractFactory(
      name: "ChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChildTunnel__factory>;
    getContractFactory(
      name: "FxBaseChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseChildTunnel__factory>;
    getContractFactory(
      name: "MetadataValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetadataValidator__factory>;
    getContractFactory(
      name: "TestBytes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBytes__factory>;
    getContractFactory(
      name: "TestBytes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBytes__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AdditiveNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdditiveNFT>;
    getContractAt(
      name: "FxBaseRootTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxBaseRootTunnel>;
    getContractAt(
      name: "ICheckpointManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICheckpointManager>;
    getContractAt(
      name: "RootTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootTunnel>;
    getContractAt(
      name: "MetaDuelGame",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaDuelGame>;
    getContractAt(
      name: "AdditiveNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdditiveNFT>;
    getContractAt(
      name: "ChildTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChildTunnel>;
    getContractAt(
      name: "FxBaseChildTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxBaseChildTunnel>;
    getContractAt(
      name: "MetadataValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetadataValidator>;
    getContractAt(
      name: "TestBytes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBytes>;
    getContractAt(
      name: "TestBytes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBytes>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
