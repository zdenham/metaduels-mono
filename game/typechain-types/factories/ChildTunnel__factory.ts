/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ChildTunnel, ChildTunnelInterface } from "../ChildTunnel";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_fxChild",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [],
    name: "fxChild",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fxRootTunnel",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "sendMessageToRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fxRootTunnel",
        type: "address",
      },
    ],
    name: "setFxRootTunnel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106bb3803806106bb8339818101604052810190610032919061008f565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610101565b600081519050610089816100ea565b92915050565b6000602082840312156100a157600080fd5b60006100af8482850161007a565b91505092915050565b60006100c3826100ca565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f3816100b8565b81146100fe57600080fd5b50565b6105ab806101106000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063450d11f0146100515780637f1e9cb01461006f578063888370941461008d5780639a113ee2146100a9575b600080fd5b6100596100c5565b60405161006691906103bf565b60405180910390f35b6100776100e9565b60405161008491906103bf565b60405180910390f35b6100a760048036038101906100a291906102a7565b61010f565b005b6100c360048036038101906100be91906102d0565b6101e4565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610197906103fc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6101ed816101f0565b50565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0368160405161021f91906103da565b60405180910390a150565b600061023d6102388461044d565b61041c565b90508281526020810184848401111561025557600080fd5b6102608482856104dc565b509392505050565b6000813590506102778161055e565b92915050565b600082601f83011261028e57600080fd5b813561029e84826020860161022a565b91505092915050565b6000602082840312156102b957600080fd5b60006102c784828501610268565b91505092915050565b6000602082840312156102e257600080fd5b600082013567ffffffffffffffff8111156102fc57600080fd5b6103088482850161027d565b91505092915050565b61031a816104aa565b82525050565b600061032b8261047d565b6103358185610488565b93506103458185602086016104eb565b61034e8161054d565b840191505092915050565b6000610366602a83610499565b91507f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008301527f4c52454144595f534554000000000000000000000000000000000000000000006020830152604082019050919050565b60006020820190506103d46000830184610311565b92915050565b600060208201905081810360008301526103f48184610320565b905092915050565b6000602082019050818103600083015261041581610359565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156104435761044261051e565b5b8060405250919050565b600067ffffffffffffffff8211156104685761046761051e565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006104b5826104bc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b838110156105095780820151818401526020810190506104ee565b83811115610518576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610567816104aa565b811461057257600080fd5b5056fea2646970667358221220462bd7576bbb96400d2c8209d1aea06db394fb5826ea2affdcc658517bab070b64736f6c63430008000033";

type ChildTunnelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChildTunnelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChildTunnel__factory extends ContractFactory {
  constructor(...args: ChildTunnelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ChildTunnel";
  }

  deploy(
    _fxChild: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChildTunnel> {
    return super.deploy(_fxChild, overrides || {}) as Promise<ChildTunnel>;
  }
  getDeployTransaction(
    _fxChild: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_fxChild, overrides || {});
  }
  attach(address: string): ChildTunnel {
    return super.attach(address) as ChildTunnel;
  }
  connect(signer: Signer): ChildTunnel__factory {
    return super.connect(signer) as ChildTunnel__factory;
  }
  static readonly contractName: "ChildTunnel";
  public readonly contractName: "ChildTunnel";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChildTunnelInterface {
    return new utils.Interface(_abi) as ChildTunnelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChildTunnel {
    return new Contract(address, _abi, signerOrProvider) as ChildTunnel;
  }
}
